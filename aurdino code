#include <ESP8266WiFi.h>
#include <WebSocketsClient.h>

const char* ssid = "Galaxy A21sD889";
const char* password = "potti 123";
const char* serverUrl = "ws://192.168.223.249:3001"; // Update the port to 3001
WiFiClient client;
WebSocketsClient webSocket;

float temperature = 25.5; // Replace with your temperature data

void setup() {
  Serial.begin(9600);
  connectToWiFi();
}

void loop() {
  webSocket.loop();

  // Simulate reading temperature data (replace with your actual logic)
  temperature = random(20, 30);

  // Send temperature data to the WebSocket server
  if (WiFi.status() == WL_CONNECTED) {
    sendTemperatureData();
  }

  delay(5000); // Adjust the delay based on your data transmission frequency
}

void connectToWiFi() {
  Serial.print("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(10000);
    Serial.print(".");
    attempts++;

    if (attempts > 20) {
      Serial.println("\nFailed to connect to Wi-Fi. Check credentials or signal strength.");
      return;
    }
  }

  Serial.println("\nConnected to Wi-Fi");

  // Connect to WebSocket after Wi-Fi connection
  connectToWebSocket();
}

void connectToWebSocket() {
  Serial.print("Connecting to WebSocket...");

  webSocket.begin(serverUrl);
  webSocket.onEvent(webSocketEvent);

  int attempts = 0;
  while (!webSocket.isConnected()) {
    delay(1000);
    Serial.print(".");
    attempts++;

    if (attempts > 10) {
      Serial.println("\nFailed to connect to WebSocket. Check server availability.");
      return;
    }
  }

  Serial.println("\nConnected to WebSocket");
}

void sendTemperatureData() {
  // Convert float to String and send it as a message
  String message = "temperature=" + String(temperature);
  Serial.println("Sending temperature data: " + message);

  // Check if WebSocket connection is still open before sending
  if (webSocket.isConnected()) {
    webSocket.sendTXT(message);
  } else {
    Serial.println("WebSocket not connected. Reconnecting...");
    connectToWebSocket();
  }
}

void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {
  if (type == WStype_CONNECTED) {
    Serial.println("WebSocket connected.");
  } else if (type == WStype_TEXT) {
    Serial.println("Received data from server: " + String((char*)payload));
    // Handle incoming data as needed
  } else if (type == WStype_DISCONNECTED) {
    Serial.println("WebSocket disconnected. Reconnecting...");
    connectToWebSocket();
  }
}
    